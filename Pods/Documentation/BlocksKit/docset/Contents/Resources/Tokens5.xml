<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Categories/NSArray+BlocksKit.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cat/NSArray(BlocksKit)</TokenIdentifier>
			<Abstract type="html">Block extensions for NSArray.</Abstract>
			<DeclaredIn>NSArray+BlocksKit.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cat/NSDictionary(BlocksKit)</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cat/NSSet(BlocksKit)</TokenIdentifier>
		
	</RelatedTokens>
	
			<NodeRef refid="5"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSArray(BlocksKit)/each:</TokenIdentifier>
			<Abstract type="html">Loops through an array and executes the given block with each object.</Abstract>
			<DeclaredIn>NSArray+BlocksKit.h</DeclaredIn>			
			
			<Declaration>- (void)each:(BKSenderBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A single-argument, void-returning code block.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/each:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSArray(BlocksKit)/apply:</TokenIdentifier>
			<Abstract type="html">Enumerates through an array concurrently and executes
the given block once for each object.</Abstract>
			<DeclaredIn>NSArray+BlocksKit.h</DeclaredIn>			
			
			<Declaration>- (void)apply:(BKSenderBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A single-argument, void-returning code block.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/apply:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSArray(BlocksKit)/match:</TokenIdentifier>
			<Abstract type="html">Loops through an array to find the object matching the block.</Abstract>
			<DeclaredIn>NSArray+BlocksKit.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intfm/NSArray(BlocksKit)/select:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (id)match:(BKValidationBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A single-argument, BOOL-returning code block.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Returns the object, if found, or nil.</Abstract></ReturnValue>
			<Anchor>//api/name/match:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSArray(BlocksKit)/select:</TokenIdentifier>
			<Abstract type="html">Loops through an array to find the objects matching the block.</Abstract>
			<DeclaredIn>NSArray+BlocksKit.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intfm/NSArray(BlocksKit)/match:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (NSArray *)select:(BKValidationBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A single-argument, BOOL-returning code block.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Returns an array of the objects found.</Abstract></ReturnValue>
			<Anchor>//api/name/select:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSArray(BlocksKit)/reject:</TokenIdentifier>
			<Abstract type="html">Loops through an array to find the objects not matching the block.</Abstract>
			<DeclaredIn>NSArray+BlocksKit.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)reject:(BKValidationBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A single-argument, BOOL-returning code block.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Returns an array of all objects not found.</Abstract></ReturnValue>
			<Anchor>//api/name/reject:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSArray(BlocksKit)/map:</TokenIdentifier>
			<Abstract type="html">Call the block once for each object and create an array of the return values.</Abstract>
			<DeclaredIn>NSArray+BlocksKit.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)map:(BKTransformBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A single-argument, object-returning code block.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Returns an array of the objects returned by the block.</Abstract></ReturnValue>
			<Anchor>//api/name/map:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSArray(BlocksKit)/reduce:withBlock:</TokenIdentifier>
			<Abstract type="html">Arbitrarily accumulate objects using a block.</Abstract>
			<DeclaredIn>NSArray+BlocksKit.h</DeclaredIn>			
			
			<Declaration>- (id)reduce:(id)initial withBlock:(BKAccumulationBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>initial</Name>
					<Abstract type="html">The value of the reduction at its start.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">A block that takes the current sum and the next object to return the new sum.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An accumulated value.</Abstract></ReturnValue>
			<Anchor>//api/name/reduce:withBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSArray(BlocksKit)/any:</TokenIdentifier>
			<Abstract type="html">Loops through an array to find whether any object matches the block.</Abstract>
			<DeclaredIn>NSArray+BlocksKit.h</DeclaredIn>			
			
			<Declaration>- (BOOL)any:(BKValidationBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A single-argument, BOOL-returning code block.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES for the first time the block returns YES for an object, NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/any:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSArray(BlocksKit)/none:</TokenIdentifier>
			<Abstract type="html">Loops through an array to find whether no objects match the block.</Abstract>
			<DeclaredIn>NSArray+BlocksKit.h</DeclaredIn>			
			
			<Declaration>- (BOOL)none:(BKValidationBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A single-argument, BOOL-returning code block.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the block returns NO for all objects in the array, NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/none:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSArray(BlocksKit)/all:</TokenIdentifier>
			<Abstract type="html">Loops through an array to find whether all objects match the block.</Abstract>
			<DeclaredIn>NSArray+BlocksKit.h</DeclaredIn>			
			
			<Declaration>- (BOOL)all:(BKValidationBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A single-argument, BOOL-returning code block.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the block returns YES for all objects in the array, NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/all:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSArray(BlocksKit)/corresponds:withBlock:</TokenIdentifier>
			<Abstract type="html">Tests whether every element of this array relates to the corresponding element of another array according to match by block.</Abstract>
			<DeclaredIn>NSArray+BlocksKit.h</DeclaredIn>			
			
			<Declaration>- (BOOL)corresponds:(NSArray *)list withBlock:(BKKeyValueValidationBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A two-argument, BOOL-returning code block.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Returns a BOOL, true if every element of array relates to corresponding element in another array.</Abstract></ReturnValue>
			<Anchor>//api/name/corresponds:withBlock:</Anchor>
		</Token>
		
	</File>
</Tokens>